/*
 Hudson/NEC HuC6260 Video Colour Encoder emulator

 The HuC6260 takes a stream of pixel data, looks up the correct
 palette data and outputs a video stream.

 The HuC6260 generates the tv control signals. A full line lasts
 1365 "master" cycles (typically at 21.47727Mhz).

 HSync is low for 237 and high for 1128 master cycles.
 VSync is low for 4095 master cycles (3 lines).
 VSync changes 30 master cycles after HSync would go low.
*/

#ifdef __arm__

#include "ARMH6280/H6280mac.h"

#define vceRegSize (vcePaletteRam-vceState)

	.global vceInit
	.global vceReset
	.global vceInitPaletteMap
	.global paletteTxAll

	.global VCE_R
	.global VCE_W

	.global vceState
	.global vceControl
	.global vcePixelClock
	.global vceDMACyclesPerScanline
	.global MAPPED_RGB
	.global vceAddress			;@ Only needed for cpu hacks
	.global vcePaletteRam		;@ Only needed for cpu hacks


;@----------------------------------------------------------------------------
	.syntax unified
	.arm
	.section .text
	.align 2
;@----------------------------------------------------------------------------
vceInit:					;@ Called from gfxInit
	.type vceInit STT_FUNC
;@----------------------------------------------------------------------------
	stmfd sp!,{lr}
//	bl setupYUV					;@ Calculate VCE YUV ROM

	ldr r0,=gGammaValue
	ldrb r0,[r0]
	bl paletteInit				;@ Do palette mapping
	bl vceReset
	ldmfd sp!,{lr}
	bx lr
;@----------------------------------------------------------------------------
vceReset:					;@ Called from GFX reset
	.type vceReset STT_FUNC
;@----------------------------------------------------------------------------
	stmfd sp!,{lr}

	ldr r0,=vceState
	mov r1,#0
	mov r2,#vceRegSize/4
	bl memset_					;@ Clear VCE regs
	bl resetPaletteRam
	bl paletteTxAll				;@ Transfer PCE palette to NDS

	ldmfd sp!,{lr}
	bx lr
;@----------------------------------------------------------------------------
//	.section .itcm
	.section .text
	.align 2
;@----------------------------------------------------------------------------
VCE_R:						;@ Video Color Encoder  read
;@----------------------------------------------------------------------------
	eatcycles 1					;@ VDC & VCE takes 1 more cycle to access
	and r1,addy,#7
	ldr pc,[pc,r1,lsl#2]
;@---------------------------
	.long 0
VCE_read_tbl:
	.long emptyRead
	.long emptyRead
	.long emptyRead
	.long emptyRead
	.long _0404R
	.long _0405R
	.long emptyRead
	.long emptyRead
;@----------------------------------------------------------------------------
VCE_W:						;@ Video Color Encoder  write
;@----------------------------------------------------------------------------
	eatcycles 1					;@ VDC & VCE takes 1 more cycle to access
	and r1,addy,#7
	ldr pc,[pc,r1,lsl#2]
;@---------------------------
	.long 0
VCE_write_tbl:
	.long _0400W
	.long emptyWrite
	.long _0402W
	.long _0403W
	.long _0404W
	.long _0405W
	.long emptyWrite
	.long emptyWrite

;@----------------------------------------------------------------------------
_0404R:						;@ VCE CTD L
;@----------------------------------------------------------------------------
	ldr r0,vceAddress
	ldr r1,=vcePaletteRam
	ldrb r0,[r1,r0,lsr#22]		;@ Load from pce palette
	bx lr
;@----------------------------------------------------------------------------
_0405R:						;@ VCE CTD H
;@----------------------------------------------------------------------------
	ldr r0,vceAddress
	add r1,r0,#0x00800000
	str r1,vceAddress
	ldr r1,=vcePaletteRam+1
	ldrb r0,[r1,r0,lsr#22]		;@ Load from pce palette
	orr r0,r0,#0xfe				;@ Only on TG16, SGX return random data.
	bx lr
;@----------------------------------------------------------------------------
_0400W:						;@ VCE CR - dotclock, interlace, color.
;@----------------------------------------------------------------------------
	strb r0,vceControl
	and r1,r0,#3
	strb r1,vcePixelClock
	cmp r1,#1
	movmi r1,#85
	moveq r1,#112
	movhi r1,#170
	strb r1,vceDMACyclesPerScanline


	ldr r1,=261					;@ NTSC (261-262) number of lines=262+1
	tst r0,#4
	addne r1,r1,#1				;@ Chew Man Fu & Jyuohki likes this, Chase HQ does not.
	ldr r0,=vdcLastScanline
	str r1,[r0]
	b calcHDW
;@----------------------------------------------------------------------------
_0402W:						;@ VCE Color Table Address L
;@----------------------------------------------------------------------------
	ldr r1,vceAddress
	and r1,r1,#0x80000000
	orr r1,r1,r0,lsl#23
	str r1,vceAddress
	bx lr
;@----------------------------------------------------------------------------
_0403W:						;@ VCE Color Table Address H
;@----------------------------------------------------------------------------
	ldr r1,vceAddress
	bic r1,r1,#0x80000000
	orr r1,r1,r0,lsl#31
	str r1,vceAddress
	bx lr
;@----------------------------------------------------------------------------
_0404W:						;@ VCE Color Table Data L
;@----------------------------------------------------------------------------
	ldr r1,vceAddress
	ldr r2,=vcePaletteRam
	strb r0,[r2,r1,lsr#22]		;@ Store in VCE palette
	bx lr
;@----------------------------------------------------------------------------
_0405W:						;@ VCE Color Table Data H
;@----------------------------------------------------------------------------
	and r0,r0,#0x01
	ldr r1,vceAddress
	add r2,r1,#0x00800000
	str r2,vceAddress
	ldr r2,=vcePaletteRam+1
	strb r0,[r2,r1,lsr#22]		;@ Store in VCE palette
	bx lr

;@----------------------------------------------------------------------------
resetPaletteRam:
	stmfd sp!,{lr}

//	ldr r0,=vcePaletteRam
//	mov r1,#0
//	mov r2,#0x400/4				;@ 512 words
//	bl memset_					;@ Clear palette

	bl rainbow

	ldmfd sp!,{pc}
;@----------------------------------------------------------------------------
fillPalette:
	ldr r0,=vcePaletteRam
	ldr r1,=defaultPalette
	mov r2,#0x400/4				;@ 512 words
	b memcpy_
;@----------------------------------------------------------------------------
rainbow:
	ldr r0,=vcePaletteRam
	mov r1,#512
rLoop:
	rsb r2,r1,#512
	strh r2,[r0],#2
	subs r1,r1,#1
	bhi rLoop
	bx lr

;@----------------------------------------------------------------------------
paletteTxAll:				;@ Called from ui.c
	.type paletteTxAll STT_FUNC
;@----------------------------------------------------------------------------
	ldr r0,=EMUPALBUFF
;@----------------------------------------------------------------------------
transcodePalette:				;@ r0 = destination
	.type transcodePalette STT_FUNC
;@----------------------------------------------------------------------------
	ldr r2,=vcePaletteRam
	ldr r3,=MAPPED_RGB
	mov r1,#0x200
txLoop:
	ldrh r12,[r2],#2
	mov r12,r12,lsl#1
	ldrh r12,[r3,r12]
	strh r12,[r0],#2
	subs r1,r1,#1
	bhi txLoop

	bx lr
;@----------------------------------------------------------------------------
vceInitPaletteMap:			;@ r0-r3 modified.
	.type   vceInitPaletteMap STT_FUNC
;@ called by ui.c:  void vceInitPaletteMap();
;@----------------------------------------------------------------------------
	stmfd sp!,{r4-r10,lr}
	ldr r6,=MAPPED_RGB
	ldr r7,=vceYUVLut
	ldr r8,=sineTable+0xF8
	mov r4,#512
noMap:							;@ map 0UUUUUVVVVVYYYYY  ->  0bbbbbgggggrrrrr
	ldrh r0,[r7],#2				;@ 0UUUUUVVVVVYYYYY

	and r1,r0,#0x7C00			;@ U (Y-B)
	orr r1,r1,r1,lsr#5
	mov r1,r1,lsr#7
	sub r1,r1,#0x80
//	mov r1,#0

	and r2,r0,#0x03E0			;@ V (Y-R)
	orr r2,r2,r2,lsr#5
	mov r2,r2,lsr#2
	sub r2,r2,#0x80
//	mov r2,#0

	ldrsb r3,[r8]
	ldrsb r5,[r8,#0x40-0xF8]

	muls r9,r1,r5
	muls r10,r2,r3
	add r9,r9,r10

	muls r2,r2,r5
	muls r1,r1,r3
	sub r2,r2,r1

	mov r1,r9,asr#7
	mov r2,r2,asr#7

	and r0,r0,#0x001F		;@ Y
	orr r0,r0,r0,lsl#5
	mov r0,r0,lsr#2

	ldr r3,=0x00010101		;@ 8bit Y to 24bit.
	mul r0,r3,r0
							;@ https://en.wikipedia.org/wiki/YCbCr , JPEG version
	ldr r3,=-0x00581062		;@ (B-Y) * -0.344 (-0x00581062)
	mul r3,r1,r3
	ldr r5,=-0x00B6C8B4		;@ (R-Y) * -0.714 (-0x00B6C8B4)
	mla r5,r2,r5,r3
	adds r5,r0,r5,asr#8		;@ G ready
	movmi r5,#0
	cmp r5,#0xFF0000
	movpl r5,#0xFF0000

	ldr r3,=0x00E2D0E4		;@ (B-Y) * 1.772 (0x01C5A1C8)
	mul r1,r3,r1
	adds r1,r0,r1,asr#7		;@ B ready
	movmi r1,#0
	cmp r1,#0xFF0000
	movpl r1,#0xFF0000

	ldr r3,=0x00B374BB		;@ (R-Y) * 1.402 (0x0166E977)
	mul r2,r3,r2
	adds r2,r0,r2,asr#7		;@ R ready
	movmi r2,#0
	cmp r2,#0xFF0000
	movpl r2,#0xFF0000

	mov r1,r1,lsr#19	;@ B
	mov r2,r2,lsr#19	;@ R
	mov r5,r5,lsr#19	;@ G
	orr r5,r2,r5,lsl#5
	orr r5,r5,r1,lsl#10

	strh r5,[r6],#2
	subs r4,r4,#1
	bhi noMap
	ldmfd sp!,{r4-r10,lr}
	bx lr

;@----------------------------------------------------------------------------
setupYUV:
;@    Y' =  1.33R' +2.61G' +0.49B' sum = 4.43 (4.42857)(31/7)
;@ R'-Y' =  2.14R' -1.80G' -0.34B' (15/(0.7*7)) (0.483R -0.407G -0.077)
;@ B'-Y' = -0.72R' -1.42G' +2.14B' (-0.163 -0.321G +0.483B)
;@----------------------------------------------------------------------------
							;@ https://en.wikipedia.org/wiki/YCbCr , JPEG version
	stmfd sp!,{r4-r9,lr}
	ldr r9,=vceRGBToYBYRY
//	ldr r9,=vceYUVLut
	mov r8,#512
	sub r8,r8,#1
yuvLoop:					;@ map 0000000gggrrrbbb  ->  U V Y
	mov r2,#0x07
	and r0,r2,r8,lsr#3		;@ R
	and r1,r2,r8,lsr#6		;@ G
	and r2,r2,r8			;@ B

	ldr r6,=0x0AEF52CC		;@ R * 0.299 (0x0AEF52CC)
	mul r3,r6,r0
	ldr r6,=0x1577A965		;@ G * 0.587 (0x1577A965)
	mla r3,r6,r1,r3
	ldr r6,=0x042B4CF2		;@ B * 0.114 (0x042B4CF2)
	mla r3,r6,r2,r3			;@ r3 = Y

	ldr r6,=-0x062E39ED		;@ R * -0.169 (0x062E39ED)
	mul r4,r6,r0
	ldr r6,=-0x0C1AEAA4		;@ G * -0.331 (0x0C1AEAA4)
	mla r4,r6,r1,r4
	ldr r6,=0x12492492		;@ B * 0.5 (0x12492492)
	mla r4,r6,r2,r4
	add r4,r4,#0x80000000	;@ r4 = U (B-Y)

	ldr r6,=0x12492492		;@ R * 0.5 (0x12492492)
	mul r5,r6,r0
	ldr r6,=-0x0F496F78		;@ G * -0.418 (0x0F496F78)
	mla r5,r6,r1,r5
	ldr r6,=-0x02F6585B		;@ B * -0.081 (0x02F6585B)
	mla r5,r6,r2,r5
	add r5,r5,#0x80000000	;@ r5 = V (R-Y)

	mov r3,r3,lsr#27
	mov r4,r4,lsr#27
	mov r5,r5,lsr#27

	orr r3,r3,r5,lsl#5
	orr r3,r3,r4,lsl#10

	mov r0,r8,lsl#1
	strh r3,[r9,r0]
	subs r8,r8,#1
	bpl yuvLoop
	ldmfd sp!,{r4-r9,pc}
;@----------------------------------------------------------------------------

	.pool
;@----------------------------------------------------------------------------
vceState:
vceAddress:
	.long 0
vceControl:
	.byte 0
vcePixelClock:
	.byte 0
vceDMACyclesPerScanline:
	.byte 0
	.byte 0
vcePaletteRam:
	.space 0x400
vceStateEnd:

	.size vceState, (vceStateEnd - vceState)

;@----------------------------------------------------------------------------
defaultPalette:
//.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
//.short 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
//.short 0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF
//.short 0x000F,0x0005,0x0000,0x0000,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x01FF,0x00FF,0x01FF

vceYUVLut:
;@ UUUUUVVVVVYYYYY
;@------------------------
.short 0x41E0, 0x49E0, 0x51E1, 0x59E1, 0x61E2, 0x69E2, 0x71E3, 0x79E3, 0x3A41, 0x4642, 0x4E42, 0x5643, 0x5E43, 0x6644, 0x6E44, 0x7645
.short 0x3683, 0x4283, 0x4A84, 0x5284, 0x5A85, 0x6285, 0x6A86, 0x7286, 0x32C4, 0x3AC4, 0x46C5, 0x4EC5, 0x56C6, 0x5EC6, 0x66C7, 0x6EC7
.short 0x2F05, 0x3706, 0x4306, 0x4B07, 0x5307, 0x5B08, 0x6308, 0x6B09, 0x2B47, 0x3347, 0x3B48, 0x4748, 0x4F49, 0x5749, 0x5F4A, 0x674A
.short 0x2788, 0x2F88, 0x3789, 0x4389, 0x4B8A, 0x538A, 0x5B8B, 0x638B, 0x23C9, 0x2BCA, 0x33CA, 0x3BCB, 0x47CB, 0x4FCC, 0x57CC, 0x5FCD
.short 0x39A3, 0x45A3, 0x4DA4, 0x55A4, 0x5DA5, 0x65A5, 0x6DA6, 0x75A6, 0x35E4, 0x41E4, 0x49E5, 0x51E5, 0x59E6, 0x61E6, 0x69E7, 0x71E7
.short 0x3245, 0x3A46, 0x4646, 0x4E47, 0x5647, 0x5E48, 0x6648, 0x6E49, 0x2E87, 0x3687, 0x4288, 0x4A88, 0x5289, 0x5A89, 0x628A, 0x6A8A
.short 0x2AC8, 0x32C8, 0x3AC9, 0x46C9, 0x4ECA, 0x56CA, 0x5ECB, 0x66CB, 0x2709, 0x2F0A, 0x370A, 0x430B, 0x4B0B, 0x530C, 0x5B0C, 0x630D
.short 0x234B, 0x2B4B, 0x334C, 0x3B4C, 0x474D, 0x4F4D, 0x574E, 0x5F4E, 0x1F8C, 0x278C, 0x2F8D, 0x378D, 0x438E, 0x4B8E, 0x538F, 0x5B8F
.short 0x3565, 0x4166, 0x4966, 0x5167, 0x5967, 0x6168, 0x6968, 0x7169, 0x31A7, 0x39A7, 0x45A8, 0x4DA8, 0x55A9, 0x5DA9, 0x65A9, 0x6DAA
.short 0x2DE8, 0x35E8, 0x41E9, 0x49E9, 0x51EA, 0x59EA, 0x61EB, 0x69EB, 0x2A49, 0x324A, 0x3A4A, 0x464B, 0x4E4B, 0x564C, 0x5E4C, 0x664D
.short 0x268B, 0x2E8B, 0x368C, 0x428C, 0x4A8D, 0x528D, 0x5A8D, 0x628E, 0x22CC, 0x2ACC, 0x32CD, 0x3ACD, 0x46CE, 0x4ECE, 0x56CF, 0x5ECF
.short 0x1F0D, 0x270E, 0x2F0E, 0x370F, 0x430F, 0x4B10, 0x5310, 0x5B11, 0x1B4F, 0x234F, 0x2B50, 0x3350, 0x3B50, 0x4751, 0x4F51, 0x5752
.short 0x3128, 0x3928, 0x4529, 0x4D29, 0x552A, 0x5D2A, 0x652B, 0x6D2B, 0x2D69, 0x356A, 0x416A, 0x496B, 0x516B, 0x596C, 0x616C, 0x696D
.short 0x29AA, 0x31AB, 0x39AB, 0x45AC, 0x4DAC, 0x55AD, 0x5DAD, 0x65AE, 0x25EC, 0x2DEC, 0x35ED, 0x41ED, 0x49EE, 0x51EE, 0x59EF, 0x61EF
.short 0x224D, 0x2A4E, 0x324E, 0x3A4F, 0x464F, 0x4E50, 0x5650, 0x5E51, 0x1E8E, 0x268F, 0x2E8F, 0x3690, 0x4290, 0x4A91, 0x5291, 0x5A92
.short 0x1AD0, 0x22D0, 0x2AD1, 0x32D1, 0x3AD2, 0x46D2, 0x4ED3, 0x56D3, 0x1711 ,0x1F12, 0x2712, 0x2F13, 0x3713, 0x4314, 0x4B14, 0x5315
.short 0x2CEA, 0x34EB, 0x40EB, 0x48EC, 0x50EC, 0x58ED, 0x60ED, 0x68EE, 0x292C, 0x312C, 0x392D, 0x452D, 0x4D2E, 0x552E, 0x5D2F, 0x652F
.short 0x256D, 0x2D6E, 0x356E, 0x416F, 0x496F, 0x5170, 0x5970, 0x6171, 0x21AE, 0x29AF, 0x31AF, 0x39B0, 0x45B0, 0x4DB1, 0x55B1, 0x5DB2
.short 0x1DF0, 0x25F0, 0x2DF1, 0x35F1, 0x41F2, 0x49F2, 0x51F3, 0x59F3, 0x1A51, 0x2252, 0x2A52, 0x3253, 0x3A53, 0x4654, 0x4E54, 0x5655
.short 0x1692, 0x1E93, 0x2693, 0x2E94, 0x3694, 0x4295, 0x4A95, 0x5296, 0x12D4, 0x1AD4, 0x22D5, 0x2AD5, 0x32D6, 0x3AD6, 0x46D7, 0x4ED7
.short 0x28AD, 0x30AE, 0x38AE, 0x44AF, 0x4CAF, 0x54B0, 0x5CB0, 0x64B0, 0x24EE, 0x2CEF, 0x34EF, 0x40F0, 0x48F0, 0x50F1, 0x58F1, 0x60F2
.short 0x2130, 0x2930, 0x3131, 0x3931, 0x4532, 0x4D32, 0x5533, 0x5D33, 0x1D71, 0x2572, 0x2D72, 0x3573, 0x4173, 0x4973, 0x5174, 0x5974
.short 0x19B2, 0x21B3, 0x29B3, 0x31B4, 0x39B4, 0x45B5, 0x4DB5, 0x55B6, 0x15F4, 0x1DF4, 0x25F5, 0x2DF5, 0x35F6, 0x41F6, 0x49F7, 0x51F7
.short 0x1255, 0x1A56, 0x2256, 0x2A57, 0x3257, 0x3A57, 0x4658, 0x4E58, 0x0E96, 0x1697, 0x1E97, 0x2698, 0x2E98, 0x3699, 0x4299, 0x4A9A
.short 0x2470, 0x2C70, 0x3471, 0x4071, 0x4872, 0x5072, 0x5873, 0x6073, 0x20B1, 0x28B1, 0x30B2, 0x38B2, 0x44B3, 0x4CB3, 0x54B4, 0x5CB4
.short 0x1CF2, 0x24F3, 0x2CF3, 0x34F4, 0x40F4, 0x48F5, 0x50F5, 0x58F6, 0x1934, 0x2134, 0x2935, 0x3135, 0x3936, 0x4536, 0x4D37, 0x5537
.short 0x1575, 0x1D75, 0x2576, 0x2D76, 0x3577, 0x4177, 0x4978, 0x5178, 0x11B6, 0x19B7, 0x21B7, 0x29B8, 0x31B8, 0x39B9, 0x45B9, 0x4DBA
.short 0x0DF8, 0x15F8, 0x1DF9, 0x25F9, 0x2DFA, 0x35FA, 0x41FB, 0x49FB, 0x0A59, 0x1259, 0x1A5A, 0x225A, 0x2A5B, 0x325B, 0x3A5C, 0x465C
.short 0x2032, 0x2833, 0x3033, 0x3834, 0x4434, 0x4C35, 0x5435, 0x5C36, 0x1C74, 0x2474, 0x2C75, 0x3475, 0x4076, 0x4876, 0x5077, 0x5877
.short 0x18B5, 0x20B5, 0x28B6, 0x30B6, 0x38B7, 0x44B7, 0x4CB8, 0x54B8, 0x14F6, 0x1CF7, 0x24F7, 0x2CF8, 0x34F8, 0x40F9, 0x48F9, 0x50FA
.short 0x1138, 0x1938, 0x2139, 0x2939, 0x313A, 0x393A, 0x453B, 0x4D3B, 0x0D79, 0x1579, 0x1D7A, 0x257A, 0x2D7B, 0x357B, 0x417C, 0x497C
.short 0x09BA, 0x11BB, 0x19BB, 0x21BC, 0x29BC, 0x31BD, 0x39BD, 0x45BE, 0x05FC, 0x0DFC, 0x15FD, 0x1DFD, 0x25FE, 0x2DFE, 0x35FF, 0x41FF

vceRGBToYBYRY:
;@ GGGRRRBBB -> UUUUUVVVVVYYYYY
;@------------------------
	.space 0x200*2		;@ 512 * 2 bytes
;@----------------------------------------------------------------------------
sineTable:
;@----------------------------------------------------------------------------
	.byte 0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15, 0x18, 0x1B, 0x1E, 0x22, 0x25, 0x27, 0x2A, 0x2D
	.byte 0x30, 0x33, 0x36, 0x39, 0x3C, 0x3E, 0x41, 0x44, 0x46, 0x49, 0x4B, 0x4E, 0x50, 0x53, 0x55, 0x57
	.byte 0x5A, 0x5C, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6B, 0x6D, 0x6E, 0x70, 0x71, 0x73, 0x74
	.byte 0x75, 0x76, 0x78, 0x79, 0x7A, 0x7A, 0x7B, 0x7C, 0x7D, 0x7D, 0x7E, 0x7E, 0x7E, 0x7F, 0x7F, 0x7F
	.byte 0x7F, 0x7F, 0x7F, 0x7F, 0x7E, 0x7E, 0x7E, 0x7D, 0x7D, 0x7C, 0x7B, 0x7A, 0x7A, 0x79, 0x78, 0x76
	.byte 0x75, 0x74, 0x73, 0x71, 0x70, 0x6E, 0x6D, 0x6B, 0x6A, 0x68, 0x66, 0x64, 0x62, 0x60, 0x5E, 0x5C
	.byte 0x5A, 0x57, 0x55, 0x53, 0x50, 0x4E, 0x4B, 0x49, 0x46, 0x44, 0x41, 0x3E, 0x3C, 0x39, 0x36, 0x33
	.byte 0x30, 0x2D, 0x2A, 0x27, 0x25, 0x22, 0x1E, 0x1B, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09, 0x06, 0x03
	.byte 0x00, 0xFD, 0xFA, 0xF7, 0xF4, 0xF1, 0xEE, 0xEB, 0xE8, 0xE5, 0xE2, 0xDE, 0xDB, 0xD9, 0xD6, 0xD3
	.byte 0xD0, 0xCD, 0xCA, 0xC7, 0xC4, 0xC2, 0xBF, 0xBC, 0xBA, 0xB7, 0xB5, 0xB2, 0xB0, 0xAD, 0xAB, 0xA9
	.byte 0xA6, 0xA4, 0xA2, 0xA0, 0x9E, 0x9C, 0x9A, 0x98, 0x96, 0x95, 0x93, 0x92, 0x90, 0x8F, 0x8D, 0x8C
	.byte 0x8B, 0x8A, 0x88, 0x87, 0x86, 0x86, 0x85, 0x84, 0x83, 0x83, 0x82, 0x82, 0x82, 0x81, 0x81, 0x81
	.byte 0x81, 0x81, 0x81, 0x81, 0x82, 0x82, 0x82, 0x83, 0x83, 0x84, 0x85, 0x86, 0x86, 0x87, 0x88, 0x8A
	.byte 0x8B, 0x8C, 0x8D, 0x8F, 0x90, 0x92, 0x93, 0x95, 0x96, 0x98, 0x9A, 0x9C, 0x9E, 0xA0, 0xA2, 0xA4
	.byte 0xA6, 0xA9, 0xAB, 0xAD, 0xB0, 0xB2, 0xB5, 0xB7, 0xBA, 0xBC, 0xBF, 0xC2, 0xC4, 0xC7, 0xCA, 0xCD
	.byte 0xD0, 0xD3, 0xD6, 0xD9, 0xDB, 0xDE, 0xE2, 0xE5, 0xE8, 0xEB, 0xEE, 0xF1, 0xF4, 0xF7, 0xFA, 0xFD
;@----------------------------------------------------------------------------
	.section .bss
	.align 2
MAPPED_RGB:
	.space 0x400

;@...update load/savestate if you move things around in here
;@----------------------------------------------------------------------------
	.end
#endif // #ifdef __arm__
